#!/usr/bin/env bash
# This script was generated by bashly 1.2.6 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
sb_usage() {
  printf "sb - Glow sandbox/prod-cron0 tool\n\n"

  printf "%s\n" "Usage:"
  printf "  sb COMMAND\n"
  printf "  sb [COMMAND] --help | -h\n"
  printf "  sb --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Generate bash completions\n" "completions"
  printf "  %s   download file under /nail/srv from remote to local\n" "download   "
  printf "  %s   Upload a file to remote /nail/srv directory and restart a service\n" "deploy     "
  printf "  %s   update a file to remote and run python script\n" "run        "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
sb_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "sb completions\n\n"
    printf "  Generate bash completions\n  Usage: eval \"\$(sb completions)\"\n\n"
  else
    printf "sb completions - Generate bash completions\n\n"
  fi

  printf "%s\n" "Usage:"
  printf "  sb completions\n"
  printf "  sb completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
sb_download_usage() {
  printf "sb download - download file under /nail/srv from remote to local\n\n"

  printf "%s\n" "Usage:"
  printf "  sb download FILEPATH [OPTIONS]\n"
  printf "  sb download --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--remote-user REMOTE-USER"
    printf "\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "FILEPATH"
    printf "    local file path\n"
    echo

  fi
}

# :command.usage
sb_deploy_usage() {
  printf "sb deploy - Upload a file to remote /nail/srv directory and restart a service\n\n"

  printf "%s\n" "Usage:"
  printf "  sb deploy [FILEPATH] [OPTIONS]\n"
  printf "  sb deploy --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--remote-user REMOTE-USER"
    printf "\n"
    echo

    # :flag.usage
    printf "  %s\n" "--remote-home REMOTE-HOME"
    printf "    remote home path, e.g. /home/winter\n"
    echo

    # :flag.usage
    printf "  %s\n" "--service SERVICE"
    printf "    service to restart. e.g. bryo-webrpc\n"
    echo

    # :flag.usage
    printf "  %s\n" "--monitor"
    printf "    show service log, tail -f /nail/log/[service].stdouterr\n"
    printf "    %s\n" "Needs: --service"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "FILEPATH"
    printf "    local file path\n"
    echo

  fi
}

# :command.usage
sb_run_usage() {
  printf "sb run - update a file to remote and run python script\n\n"

  printf "%s\n" "Usage:"
  printf "  sb run FILEPATH [PYARGS] [OPTIONS]\n"
  printf "  sb run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--remote-user REMOTE-USER"
    printf "\n"
    echo

    # :flag.usage
    printf "  %s\n" "--remote-home REMOTE-HOME"
    printf "    remote home path, e.g. /home/winter\n"
    echo

    # :flag.usage
    printf "  %s\n" "--upload-parent"
    printf "    upload parent directory of the file\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "FILEPATH"
    printf "    python script to run\n"
    echo

    # :argument.usage
    printf "  %s\n" "PYARGS"
    printf "    args for python script\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/base.sh
function sandbox_path() {
  sb_path=''
  sandbox_dir="/nail/srv"
  file_path="$1"
  target_paths=(
    "bryo/"
    "emma/"
    "kaylee/"
    "lexie/"
    "noah/"
    "glow_forum/"
    "admindash/"
    "zoe/"
  )
  for target_path in "${target_paths[@]}"; do
    if [[ "$file_path" =~ "$target_path" ]]; then
      # 删除最长匹配（贪婪匹配）的部分，返回剩余部分
      file="${file_path##*$target_path}"
      sb_path="$sandbox_dir/$target_path$file"
      return
    fi
  done
}

function cache_to_file {
  local cmd=$1
  cache_file=$cmd
  cache_file="/tmp/${cmd// /_}"
  echo "cache_to_file $cache_file"
  if [[ -f "$cache_file" ]]; then
    update_time=$(date -r "$cache_file" +%s)
    current_time=$(date +%s)
    difference=$((current_time - update_time))

    if [[ -s "$cache_file" ]]; then
      if [[ "$difference" -le 3600 ]]; then
        has_cache=1
      else
        echo "File is not empty, but update time is older than 1h. ($difference)"
      fi
    else
      echo "File $cache_file is empty."
    fi
  else
    echo "File $cache_file does not exist."
  fi

  if [[ -z $has_cache ]];then
    eval "$cmd" > "$cache_file"
  fi
}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

# src/lib/prepare.sh
function prepare_remote_cmd {
  _r_exec="ssh $remote \"source /etc/profile;
  export LC_ALL=en_US.UTF-8;
  export LANG=en_US.UTF-8;%s\""

  function r_exec {
    local cmd
    cmd=$(printf "$_r_exec" "$1")
    yellow "=> $cmd"
    eval "$cmd"
  }

  _r_cp_f="scp -r %s $remote:%s"
  _r_cp_d="scp -q %s $remote:%s"

  function r_cp {
    blue "COPY $1 => $remote:$2 ..."
    local cmd
    if [[ -d $2 ]]; then
      cmd=$(printf "$_r_cp_d" "$1" "$2")
    else
      cmd=$(printf "$_r_cp_f" "$1" "$2")
    fi
    yellow "=> $cmd"
    eval "$cmd"
    green " Copied!"
  }

  function r_download {
    blue "DOWNLOAD $remote:$1 => $2"
    local cmd
    cmd="scp -q $remote:$1 $2"
    yellow "=> $cmd"
    eval "$cmd"
    green " downloaded!"
  }
}

# src/lib/send_completions.sh
send_completions() {
  echo $'# sb completion                                            -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_sb_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $''
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_sb_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_sb_completions_filter "--help -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'download\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_sb_completions_filter "--help --remote-user -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'deploy\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_sb_completions_filter "--help --monitor --remote-home --remote-user --service -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    \'run\'*)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_sb_completions_filter "--help --remote-home --remote-user --upload-parent -h")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=("$REPLY"); done < <(compgen -W "$(_sb_completions_filter "--help --version -h -v completions deploy download run")" -- "$cur")'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'  complete -F _sb_completions sb'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
sb_completions_command() {

  # src/completions_command.sh
  echo "# this file is located in 'src/completions_command.sh'"
  echo "# code for 'sb completions' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  send_completions

}

# :command.function
sb_download_command() {

  # src/download_command.sh
  inspect_args
  filepath=${args[filepath]}
  remote=${args[--remote-user]}
  prepare_remote_cmd

  if [[ -f $filepath ]]; then
    sandbox_path $filepath
    if [[ -n $sb_path ]]; then
      r_download "$sb_path" "$filepath"
    else
      yellow "No matching file found"
    fi
  fi

}

# :command.function
sb_deploy_command() {

  # src/deploy_command.sh
  inspect_args
  filepath=${args[filepath]}
  remote=${args[--remote-user]}
  home=${args[--remote-home]}

  prepare_remote_cmd
  cmd=""
  if [[ -f $filepath ]]; then
    filename=${filepath##*/}
    r_cp $filepath "$home/$filename"
    sandbox_path $filepath
    if [[ -n $sb_path ]]; then
      cmd="sudo cp $home/$filename $sb_path;"
    fi
  fi

  service=${args[--service]}
  if [[ -n $service ]]; then
    cmd="$cmd sudo supdctl restart $service;"
  fi

  monitor=${args[--monitor]}
  if [[ -n $monitor ]]; then
    cmd="$cmd tail -f /nail/logs/$service.stdouterr"
  fi

  if [[ -n $cmd ]]; then
    r_exec "$cmd"
  fi

}

# :command.function
sb_run_command() {

  # src/run_command.sh
  echo "# this file is located in 'src/run_command.sh'"
  echo "# code for 'sb run' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
  filepath=${args[filepath]}
  remote=${args[--remote-user]}
  home=${args[--remote-home]}
  upload_parent=${args[--upload-parent]}
  filename=${filepath##*/}

  prepare_remote_cmd
  if [[ -n $upload_parent ]];then
    directory="${filepath%/*}"
    if [[ -d $directory ]]; then
      dir_name=${directory##*/}
      r_cp "$directory" "$home"
    fi
  elif [[ -f $filepath ]]; then
    dir_name="test"
    r_cp "$filepath" "$home/$dir_name/$filename"
  fi

  cmd="cd $home/$dir_name; python3 $filename"
  pyargs=${args[pyargs]}
  if [[ -n $pyargs ]]; then
    cmd="$cmd $pyargs"
  fi
  r_exec "$cmd"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        sb_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    completions)
      action="completions"
      shift
      sb_completions_parse_requirements "$@"
      shift $#
      ;;

    download)
      action="download"
      shift
      sb_download_parse_requirements "$@"
      shift $#
      ;;

    deploy)
      action="deploy"
      shift
      sb_deploy_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      sb_run_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      sb_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
sb_completions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        sb_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
sb_download_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        sb_download_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="download"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --remote-user)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--remote-user']="$2"
          shift
          shift
        else
          printf "%s\n" "--remote-user requires an argument: --remote-user REMOTE-USER" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['filepath']+x} ]]; then
          args['filepath']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['filepath']+x} ]]; then
    printf "missing required argument: FILEPATH\nusage: sb download FILEPATH [OPTIONS]\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
sb_deploy_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        sb_deploy_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="deploy"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --remote-user)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--remote-user']="$2"
          shift
          shift
        else
          printf "%s\n" "--remote-user requires an argument: --remote-user REMOTE-USER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --remote-home)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--remote-home']="$2"
          shift
          shift
        else
          printf "%s\n" "--remote-home requires an argument: --remote-home REMOTE-HOME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --service)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--service']="$2"
          shift
          shift
        else
          printf "%s\n" "--service requires an argument: --service SERVICE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --monitor)

        # :flag.case_no_arg
        args['--monitor']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['filepath']+x} ]]; then
          args['filepath']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.needy_flags_filter
  # :flag.needs
  if [[ -n ${args['--monitor']+x} ]] && [[ -z "${args[--service]:-}" ]]; then
    printf "%s\n" "--monitor needs --service" >&2
    exit 1
  fi

}

# :command.parse_requirements
sb_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        sb_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --remote-user)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--remote-user']="$2"
          shift
          shift
        else
          printf "%s\n" "--remote-user requires an argument: --remote-user REMOTE-USER" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --remote-home)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--remote-home']="$2"
          shift
          shift
        else
          printf "%s\n" "--remote-home requires an argument: --remote-home REMOTE-HOME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --upload-parent)

        # :flag.case_no_arg
        args['--upload-parent']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['filepath']+x} ]]; then
          args['filepath']=$1
          shift
        # :argument.case
        elif [[ -z ${args['pyargs']+x} ]]; then
          args['pyargs']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args['filepath']+x} ]]; then
    printf "missing required argument: FILEPATH\nusage: sb run FILEPATH [PYARGS] [OPTIONS]\n" >&2

    exit 1
  fi

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a other_args=()
  declare -g -a env_var_names=()
  declare -g -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "completions") sb_completions_command ;;
    "download") sb_download_command ;;
    "deploy") sb_deploy_command ;;
    "run") sb_run_command ;;
  esac
}

initialize
run "$@"
